// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
    clear: both;
    display: table;
    content: "";
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	&::after {
        @include clearfix;
    }
}

@mixin max-auto() {
    margin: 0 auto;
    max-width: 800px;
}

@mixin link-color( $color: $color__link ) {
    &, &:link, &:visited, &:hover, &:active {
        color: $color;
    }
}

//


@mixin tag-styles() {
    padding: 2px 7px;
    border-radius: 3px;

    background-color: $color__primary;
    color: $white;

    font-size: 15px;
    text-transform: uppercase;

    &:hover {
        text-decoration: none;
        background-color: $color__primary-light;
    }

    &:not(:last-child) {
        margin-right: 5px;
    }
}

@mixin unlist() {
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 0;
    padding-left: 0;
    list-style: none;
}

@mixin button-reset() {
    background: none;
    border: none;
    border-radius: 0;
    box-shadow: none;
    text-shadow: none;

    &:active, &:focus {
        background: none;
        border: none;
        border-radius: 0;
        box-shadow: none;
        text-shadow: none;
    }
}

@mixin block-padding( $sides-only: false ) {

    @if $sides-only == true {
        padding: 0 $padding-standard / 2;
    }
    @else {
       padding: $padding-standard / 2; 
    }
    
    @media screen and ( min-width: $bp-sm ) {
        @if $sides-only == true {
            padding: 0 $padding-standard;
        }
        @else {
           padding: $padding-standard; 
        }
    }

    @media screen and ( min-width: $bp-md ) {
        @if $sides-only == true {
            padding: 0 $padding-standard * 2;
        }
        @else {
           padding: $padding-standard * 2; 
        }
    }
}



@mixin text-shadow-subtle() {
    text-shadow: 1px 2px 2px rgba(0,0,0,0.2);
}


@mixin animation-base($duration: 300ms, $timing: ease-in-out, $delay: 0) {
    transition-duration: $duration;
    transition-timing-function: $timing;
    transition-delay: $delay;
}

@mixin animation($duration: 300ms, $timing: ease-in-out, $delay: 0, $property: all) {
    @include animation-base($duration, $timing, $delay);

    transition-property: $property;
}


/* Component mixins */

@mixin contained-card() {
    width: 100%;
    height: 200px;
    margin-bottom: 20px;
    flex-grow: 1; // Allows last row items to fill row.

    @media screen and (min-width: 630px) {
        width: 48%;
        height: 350px;
        margin: 1%;
    }

    @media screen and (min-width: 940px) {
        width: 32%;
        margin: 0.6667%;
    }

    &:first-child {
        width: 100%;
    }

}

